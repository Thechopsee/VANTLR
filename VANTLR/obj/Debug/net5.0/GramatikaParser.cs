//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ValMe\Desktop\VANTLR\VANTLR\Gramatika.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GramatikaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, DATA_TYPE=8, INT_KEY=9, 
		FLT_KEY=10, BLN_KEY=11, STR_KEY=12, ADD=13, SUB=14, MUL=15, DIV=16, NOT=17, 
		MOD=18, CCT=19, LTN=20, MTN=21, EQL=22, NEQ=23, AND=24, OR=25, IF=26, 
		ELSE=27, WHILE=28, WRITE=29, READ=30, BOOLEAN=31, IDENTIFIER=32, INTEGER=33, 
		FLOAT=34, STRING=35, LINE_COMMENT=36, WHITE_SPACES=37;
	public const int
		RULE_program = 0, RULE_command = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"program", "command", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "','", "';'", "'('", "')'", "'='", null, "'int'", 
		"'float'", "'bool'", "'string'", "'+'", "'-'", "'*'", "'/'", null, "'%'", 
		"'.'", "'<'", "'>'", "'=='", "'!='", null, null, "'if'", "'else'", "'while'", 
		"'write'", "'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "DATA_TYPE", "INT_KEY", 
		"FLT_KEY", "BLN_KEY", "STR_KEY", "ADD", "SUB", "MUL", "DIV", "NOT", "MOD", 
		"CCT", "LTN", "MTN", "EQL", "NEQ", "AND", "OR", "IF", "ELSE", "WHILE", 
		"WRITE", "READ", "BOOLEAN", "IDENTIFIER", "INTEGER", "FLOAT", "STRING", 
		"LINE_COMMENT", "WHITE_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatika.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramatikaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 6; command();
				}
				}
				State = 9;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << DATA_TYPE) | (1L << SUB) | (1L << NOT) | (1L << IF) | (1L << WHILE) | (1L << WRITE) | (1L << READ) | (1L << BOOLEAN) | (1L << IDENTIFIER) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadContext : CommandContext {
		public ITerminalNode READ() { return GetToken(GramatikaParser.READ, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GramatikaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GramatikaParser.IDENTIFIER, i);
		}
		public ReadContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteContext : CommandContext {
		public ITerminalNode WRITE() { return GetToken(GramatikaParser.WRITE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyContext : CommandContext {
		public EmptyContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : CommandContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpressionContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Code_blockContext : CommandContext {
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public Code_blockContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationContext : CommandContext {
		public ITerminalNode DATA_TYPE() { return GetToken(GramatikaParser.DATA_TYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GramatikaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GramatikaParser.IDENTIFIER, i);
		}
		public DeclarationContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : CommandContext {
		public ITerminalNode WHILE() { return GetToken(GramatikaParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public WhileContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : CommandContext {
		public ITerminalNode IF() { return GetToken(GramatikaParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(GramatikaParser.ELSE, 0); }
		public IfContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_command);
		int _la;
		try {
			State = 69;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				_localctx = new Code_blockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 11; Match(T__0);
				State = 13;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 12; command();
					}
					}
					State = 15;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << DATA_TYPE) | (1L << SUB) | (1L << NOT) | (1L << IF) | (1L << WHILE) | (1L << WRITE) | (1L << READ) | (1L << BOOLEAN) | (1L << IDENTIFIER) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING))) != 0) );
				State = 17; Match(T__1);
				}
				break;
			case DATA_TYPE:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(DATA_TYPE);
				State = 20; Match(IDENTIFIER);
				State = 25;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 21; Match(T__2);
					State = 22; Match(IDENTIFIER);
					}
					}
					State = 27;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 28; Match(T__3);
				}
				break;
			case IF:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; Match(IF);
				State = 30; Match(T__4);
				State = 31; expr(0);
				State = 32; Match(T__5);
				State = 33; command();
				State = 36;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 34; Match(ELSE);
					State = 35; command();
					}
					break;
				}
				}
				break;
			case WHILE:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 38; Match(WHILE);
				State = 39; Match(T__4);
				State = 40; expr(0);
				State = 41; Match(T__5);
				State = 42; command();
				}
				break;
			case T__4:
			case SUB:
			case NOT:
			case BOOLEAN:
			case IDENTIFIER:
			case INTEGER:
			case FLOAT:
			case STRING:
				_localctx = new ExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 44; expr(0);
				State = 45; Match(T__3);
				}
				break;
			case READ:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 47; Match(READ);
				State = 48; Match(IDENTIFIER);
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 49; Match(T__2);
					State = 50; Match(IDENTIFIER);
					}
					}
					State = 55;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 56; Match(T__3);
				}
				break;
			case WRITE:
				_localctx = new WriteContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; Match(WRITE);
				State = 58; expr(0);
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 59; Match(T__2);
					State = 60; expr(0);
					}
					}
					State = 65;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 66; Match(T__3);
				}
				break;
			case T__3:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 68; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicationContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(GramatikaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(GramatikaParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(GramatikaParser.MOD, 0); }
		public MultiplicationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(GramatikaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(GramatikaParser.SUB, 0); }
		public ITerminalNode CCT() { return GetToken(GramatikaParser.CCT, 0); }
		public AdditionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(GramatikaParser.OR, 0); }
		public OrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(GramatikaParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(GramatikaParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : ExprContext {
		public ITerminalNode INTEGER() { return GetToken(GramatikaParser.INTEGER, 0); }
		public IntegerContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GramatikaParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(GramatikaParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesisContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTN() { return GetToken(GramatikaParser.LTN, 0); }
		public ITerminalNode MTN() { return GetToken(GramatikaParser.MTN, 0); }
		public RelationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GramatikaParser.IDENTIFIER, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(GramatikaParser.AND, 0); }
		public AndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQL() { return GetToken(GramatikaParser.EQL, 0); }
		public ITerminalNode NEQ() { return GetToken(GramatikaParser.NEQ, 0); }
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		public ITerminalNode BOOLEAN() { return GetToken(GramatikaParser.BOOLEAN, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.EnterMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatikaListener typedListener = listener as IGramatikaListener;
			if (typedListener != null) typedListener.ExitMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatikaVisitor<TResult> typedVisitor = visitor as IGramatikaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				_localctx = new ParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 72; Match(T__4);
				State = 73; expr(0);
				State = 74; Match(T__5);
				}
				break;

			case 2:
				{
				_localctx = new IntegerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 76; Match(INTEGER);
				}
				break;

			case 3:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 77; Match(FLOAT);
				}
				break;

			case 4:
				{
				_localctx = new BooleanContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 78; Match(BOOLEAN);
				}
				break;

			case 5:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 79; Match(STRING);
				}
				break;

			case 6:
				{
				_localctx = new IdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 80; Match(IDENTIFIER);
				}
				break;

			case 7:
				{
				_localctx = new MinusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 81; Match(SUB);
				State = 82; expr(9);
				}
				break;

			case 8:
				{
				_localctx = new NegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 83; Match(NOT);
				State = 84; expr(8);
				}
				break;

			case 9:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 85; Match(IDENTIFIER);
				State = 86; Match(T__6);
				State = 87; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 110;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 108;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 91;
						((MultiplicationContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicationContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 92; expr(8);
						}
						break;

					case 2:
						{
						_localctx = new AdditionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 94;
						((AdditionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << CCT))) != 0)) ) {
							((AdditionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 95; expr(7);
						}
						break;

					case 3:
						{
						_localctx = new RelationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 97;
						((RelationContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LTN || _la==MTN) ) {
							((RelationContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 98; expr(6);
						}
						break;

					case 4:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 100;
						((EqualityContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQL || _la==NEQ) ) {
							((EqualityContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 101; expr(5);
						}
						break;

					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 103; Match(AND);
						State = 104; expr(4);
						}
						break;

					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 106; Match(OR);
						State = 107; expr(3);
						}
						break;
					}
					} 
				}
				State = 112;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'t\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x3\x3\x6\x3"+
		"\x10\n\x3\r\x3\xE\x3\x11\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x1A"+
		"\n\x3\f\x3\xE\x3\x1D\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\'\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x36\n\x3\f\x3\xE\x3\x39\v\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\a\x3@\n\x3\f\x3\xE\x3\x43\v\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3H\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4[\n\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\a\x4o\n\x4\f\x4\xE\x4r\v\x4\x3\x4\x2\x2\x3\x6"+
		"\x5\x2\x2\x4\x2\x6\x2\x2\x6\x4\x2\x11\x12\x14\x14\x4\x2\xF\x10\x15\x15"+
		"\x3\x2\x16\x17\x3\x2\x18\x19\x8B\x2\t\x3\x2\x2\x2\x4G\x3\x2\x2\x2\x6Z"+
		"\x3\x2\x2\x2\b\n\x5\x4\x3\x2\t\b\x3\x2\x2\x2\n\v\x3\x2\x2\x2\v\t\x3\x2"+
		"\x2\x2\v\f\x3\x2\x2\x2\f\x3\x3\x2\x2\x2\r\xF\a\x3\x2\x2\xE\x10\x5\x4\x3"+
		"\x2\xF\xE\x3\x2\x2\x2\x10\x11\x3\x2\x2\x2\x11\xF\x3\x2\x2\x2\x11\x12\x3"+
		"\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13\x14\a\x4\x2\x2\x14H\x3\x2\x2\x2\x15"+
		"\x16\a\n\x2\x2\x16\x1B\a\"\x2\x2\x17\x18\a\x5\x2\x2\x18\x1A\a\"\x2\x2"+
		"\x19\x17\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3"+
		"\x2\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1EH\a\x6\x2\x2\x1F"+
		" \a\x1C\x2\x2 !\a\a\x2\x2!\"\x5\x6\x4\x2\"#\a\b\x2\x2#&\x5\x4\x3\x2$%"+
		"\a\x1D\x2\x2%\'\x5\x4\x3\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'H\x3\x2\x2\x2"+
		"()\a\x1E\x2\x2)*\a\a\x2\x2*+\x5\x6\x4\x2+,\a\b\x2\x2,-\x5\x4\x3\x2-H\x3"+
		"\x2\x2\x2./\x5\x6\x4\x2/\x30\a\x6\x2\x2\x30H\x3\x2\x2\x2\x31\x32\a \x2"+
		"\x2\x32\x37\a\"\x2\x2\x33\x34\a\x5\x2\x2\x34\x36\a\"\x2\x2\x35\x33\x3"+
		"\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2"+
		"\x38:\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:H\a\x6\x2\x2;<\a\x1F\x2\x2<\x41"+
		"\x5\x6\x4\x2=>\a\x5\x2\x2>@\x5\x6\x4\x2?=\x3\x2\x2\x2@\x43\x3\x2\x2\x2"+
		"\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2\x2\x2\x43\x41\x3\x2"+
		"\x2\x2\x44\x45\a\x6\x2\x2\x45H\x3\x2\x2\x2\x46H\a\x6\x2\x2G\r\x3\x2\x2"+
		"\x2G\x15\x3\x2\x2\x2G\x1F\x3\x2\x2\x2G(\x3\x2\x2\x2G.\x3\x2\x2\x2G\x31"+
		"\x3\x2\x2\x2G;\x3\x2\x2\x2G\x46\x3\x2\x2\x2H\x5\x3\x2\x2\x2IJ\b\x4\x1"+
		"\x2JK\a\a\x2\x2KL\x5\x6\x4\x2LM\a\b\x2\x2M[\x3\x2\x2\x2N[\a#\x2\x2O[\a"+
		"$\x2\x2P[\a!\x2\x2Q[\a%\x2\x2R[\a\"\x2\x2ST\a\x10\x2\x2T[\x5\x6\x4\vU"+
		"V\a\x13\x2\x2V[\x5\x6\x4\nWX\a\"\x2\x2XY\a\t\x2\x2Y[\x5\x6\x4\x3ZI\x3"+
		"\x2\x2\x2ZN\x3\x2\x2\x2ZO\x3\x2\x2\x2ZP\x3\x2\x2\x2ZQ\x3\x2\x2\x2ZR\x3"+
		"\x2\x2\x2ZS\x3\x2\x2\x2ZU\x3\x2\x2\x2ZW\x3\x2\x2\x2[p\x3\x2\x2\x2\\]\f"+
		"\t\x2\x2]^\t\x2\x2\x2^o\x5\x6\x4\n_`\f\b\x2\x2`\x61\t\x3\x2\x2\x61o\x5"+
		"\x6\x4\t\x62\x63\f\a\x2\x2\x63\x64\t\x4\x2\x2\x64o\x5\x6\x4\b\x65\x66"+
		"\f\x6\x2\x2\x66g\t\x5\x2\x2go\x5\x6\x4\ahi\f\x5\x2\x2ij\a\x1A\x2\x2jo"+
		"\x5\x6\x4\x6kl\f\x4\x2\x2lm\a\x1B\x2\x2mo\x5\x6\x4\x5n\\\x3\x2\x2\x2n"+
		"_\x3\x2\x2\x2n\x62\x3\x2\x2\x2n\x65\x3\x2\x2\x2nh\x3\x2\x2\x2nk\x3\x2"+
		"\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2q\a\x3\x2\x2\x2rp\x3\x2"+
		"\x2\x2\f\v\x11\x1B&\x37\x41GZnp";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace VANTLR
